<h1>Default template parameters</h1>
Default template arguments can be specified in the template parameter list
<pre><code class="cpp">
template< typename T1 = int, 
          typename T2 = long, 
          typename T3 = std::string >
struct struct_with_default_types {};

int main() {
   struct_with_default_types <> obj; // Uses all default arguments
}
</code></pre>

There isn't a standard way to specify some arguments and leave the others defaulted though, e.g.
<pre class="inline"><code class="cpp">struct_with_default_types<default_type, default_type, bool> obj;</code></pre>
However there are techniques which can mimic the intended behavior.

<h2>Change a subset of default arguments with 'using'</h2>
The <pre class="inline"><code class="cpp">using</code></pre> directive in the example below allows to leave some arguments 
defaulted while changing others at will
<pre><code class="cpp">
#include <string>
#include <utility>

struct default_type {};

template< typename T1 = default_type, 
          typename T2 = default_type, 
          typename T3 = default_type >
struct struct_with_default_types {
  using internalT1 = typename std::conditional<
                                std::is_same<T1, default_type>::value,
                                int, // Return the default type
                                T1   // Return whatever the user passed
                              >::type;
  
  // Same as above
  using internalT2 = typename std::conditional<
                                std::is_same<T2, default_type>::value,
                                long, // Return the default type
                                T2    // Return whatever the user passed
                              >::type;

  // Same as above
  using internalT3 = typename std::conditional<
                                std::is_same<T3, default_type>::value,
                                std::string, // Return the default type
                                T3           // Return whatever the user passed
                              >::type;
                              
  static_assert (std::is_same<internalT1, int>::value, "T1 doesn't match expected");
  static_assert (std::is_same<internalT2, long>::value, "T2 doesn't match expected");
  static_assert (std::is_same<internalT3, std::wstring>::value, "T3 doesn't match expected");
};

int main() {
   struct_with_default_types <default_type, default_type, std::wstring> obj;
}
</code></pre>
<br/>
<h2>Change a subset of default arguments by recursively instantiating different templates</h2>
Another workaround to the issue could be recursively instantiating a template with the desired set of arguments
<pre><code class="cpp">
#include <string>
#include <iostream>
#include <typeinfo>

struct default_type {};

template <typename T1 = int,
          typename T2 = long,
          typename T3 = std::string>
struct struct_with_default_types {
    
  template <typename NewT1>
  using WithT1 = struct_with_default_types <NewT1, T2, T3>;
  template <typename NewT2>
  using WithT2 = struct_with_default_types <T1, NewT2, T3>;
  template <typename NewT3>
  using WithT3 = struct_with_default_types <T1, T2, NewT3>;
                              
  void function () {
      T1 a; T2 b; T3 c;
      // Demangle code omissed
      std::cout << demangle(typeid(a).name()) << " " << demangle(typeid(b).name())
        << " " << demangle(typeid(c).name()); // "bool long std::basic_string<wchar_t..>"
  }
};

int main() {
   struct_with_default_types<>::WithT1<bool>::WithT3<std::wstring> obj;
   obj.function();
}
</code></pre>
Notice that both the template with default arguments <pre class="inline"><code class="cpp">struct_with_default_types<></code></pre> that the final template with
whatever argument the user chose will be instantiated since:
<blockquote>
[C++11: 14.7.1]: Unless a class template specialization (when all arguments have been used, in this case <>) has been explicitly instantiated (14.7.2) or explicitly specialized (14.7.3) (both didn't happen in this case), the class template specialization is implicitly instantiated when the specialization is referenced in a context that requires a completely-defined object type or when the completeness of the class type affects the semantics of the program. [..] (in this case it does)
</blockquote>
<br/>
<h2>Change a subset of default arguments with 'tuple_element_t'</h2>
Another trick could be to create at compile-time a tuple with the default arguments of the original template and get the N-th type with the C++14 function <pre class="inline"><code class="cpp">tuple_element_t</code></pre>

<pre><code class="cpp">
template< typename T1 = int, 
          typename T2 = long, 
          typename T3 = std::string >
struct struct_with_default_types {
  void function () {
    T1 a; T2 b; T3 c;
    // Demangle code omissed
    std::cout << demangle(typeid(a).name()) << " " << demangle(typeid(b).name())
      << " " << demangle(typeid(c).name()); // bool long std::basic_string<wchar_t..>
  }
};

///////////////////////////////////////
template <class T, size_t N>
struct helper; // A base template is needed, the next helper is a template explicit partial specialization

template <template <typename...> class T, size_t N, typename... Args>
struct helper<T<Args...>, N> { // Assign any number of arguments of the original template to Args...
    using type = std::tuple_element_t<N, std::tuple<Args...>>; // Generate a tuple and get the Nth type
};

template <template <typename...> class T, size_t N>
using get_template_default_type = typename helper<T<>, N>::type; // Start here -> get a template default type
///////////////////////////////////////        

int main() {
   struct_with_default_types<get_template_default_type<struct_with_default_types, 0>,
                             get_template_default_type<struct_with_default_types, 1>,
                             std::wstring> obj;
   obj.function();
}
</code></pre>