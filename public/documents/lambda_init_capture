<h1>Lambda init-capture</h1>
A C++11+ lambda defines a <a href="http://en.wikipedia.com/wiki/Closure_(computer_science)">closure</a>. In its <i>capture-list</i> (i.e. not a <i>capture-default expression</i>)
<i>captures</i> can be specified
<pre><code>int k = 23;
// Capture everything by copy, except k by reference
auto dd = [=, &k /* Capture-list */] () {
  k += 2;  
};
dd ();
// k is now 25
</code></pre>

A <i>capture</i> is a direct initialized data member of the lambda (they're direct-initialized from the corresponding entities captured by value or references to the entities objects if captured
by reference - §5.1.2/p15)
<pre><code>Test obj1(22);
auto dd = [obj1] () { // This data member is direct-initialized Test lambda_scope_obj1(obj1)
                      // Calls a copy constructor if available
};
dd ();
</code></pre>
or lambda data members initialized from <i>init-captures</i>. These last data members can provide initialization to lambda members since §5.1.2/p11
<blockquote>An init-capture behaves as if it declares and explicitly captures a variable of the form "auto init-capture ;" whose declarative region is the lambda-expression's compound-statement, [..]</blockquote>

This means undeclared variables in the outer scope are fine within the lambda if linked to init-capture initialization
<pre><code>auto dd = [r = 22] () {
    // Error - either mark this lambda as mutable or capture by reference
    r = 23;
};
</code></pre>
Notice that lambdas are function objects - the intended use is to produce the same result every time they're called (on the line: no global states): that explains the error requiring <pre class="inline"><code>mutable</code></pre> or
the by-reference capture.

The fact that init-captures declares <pre class="inline"><code>auto varName</code></pre> variables might require some attention when dealing with uniform initialization, e.g.
<pre><code>std::vector<int> v(500, 0);
// v has size 500
// The following is interpreted as std::initializer_list<std::vector<int>> v = {move(v)};
auto dd = [ v = {std::move(v)} ]() {
    // v has size 1
};
</code></pre>
<a href="http://en.cppreference.com/w/cpp/language/list_initialization">list-initialization</a> prefers the constructor taking a <pre class="inline"><code>std::initializer_list</code></pre> before considering all the other
constructors. Using <pre class="inline"><code>v = std::move(v)</code></pre> would yield the intended behavior.